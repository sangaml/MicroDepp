# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: 'sangampool'

variables:
  dockerId: microdepp  # Replace with your Docker ID for Docker Hub or the admin user name for the Azure Container Registry
  imageName: rsvp  # Replace with the name of the image you want to publish
  dbimageName: mongo

steps:
- script: |
    echo "whoami"
    whoami
    echo "which python"
    which python
    echo "which coverage"
    which coverage
    ls -l /usr/local/bin
    az login --service-principal -u $(appid) -p $(secretkey) --tenant $(tenant)
    az acr login --name $(dockerId)
    docker build -t $(dockerId).azurecr.io/$(dbimageName):$BUILD_BUILDNUMBER ./mongo 
    docker push $(dockerId).azurecr.io/$(dbimageName):$BUILD_BUILDNUMBER
    docker build -t $(dockerId).azurecr.io/$(imageName):$BUILD_BUILDNUMBER ./rsvpapp 
    docker push $(dockerId).azurecr.io/$(imageName):$BUILD_BUILDNUMBER
    coverage xml -o ./coverage/coverage.xml rsvpapp/rsvp.py
    coverage html -d ./coverage/htmlcov rsvpapp/rsvp.py
    #cp Dockerfile $(Build.ArtifactStagingDirectory)/
    mkdir $(Build.ArtifactStagingDirectory)/terraform
    cp ./terraform/* $(Build.ArtifactStagingDirectory)/terraform/
    
  displayName: 'Build APP & DB containers and push to $(dockerId).azurecr.io'

#- task: Python Unit Test@0
#  inputs:
#    pythonroot: 'rsvpapp'
#    coveragedir: 'coverage'
#    testfilepattern: 'test*.py'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage from $(System.DefaultWorkingDirectory)/coverage/coverage.xml'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/coverage.xml'
    
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
